#!/usr/bin/python

#
# Parse sip pcap and generates list of IPSEC SA for wireshark
# Copyright (c) Denis Gudtsov, 2016

# v0.1 - can set only defult values of ealg and alg

import subprocess
import sys
import re

# wireshark values
ealg="\"AES-CBC [RFC3602]\""
alg="\"HMAC-MD5-96 [RFC2403]\""

# wireshark esp_sa file name
esp_sa_name="esp_sa"

# system command to run tshark
ts="tshark -r __FILE_NAME__ -Y sip -O sip"

#debug=True
debug=False

messages={}

method=''
callid=''
security=''
IK=''

pkt_params={}

headers={
'Integrity Key':'IK',
'Cyphering Key':'CK',
'spi-c':'spi-c',
'spi-s':'spi-s',
'alg':'alg',
'ealg':'ealg'
}

# parse sip header
# pos 0 - header name
# pos 1 - header value
def parse_header(line,pos):
    value=line.split(':',1)[pos]
    value=value.lstrip()
    return value

def extract_header_key(header):
    return parse_header(header,0)

def extract_header_value(header):
    return parse_header(header,1)

def print_debug(debug_string):
    if debug: print debug_string
    return

def spi_normalize(spi_item):
#   m=re.match('\d+? \((.*)\)',spi_item)
    return "\""+re.match('\d+? \((.*)\)',spi_item).group(1)+"\""

def generate_esp_sa(messages):

    with open(esp_sa_name,"w") as f:

        f.write ("# ESP SA are automatically generated by script "+sys.argv[0]+" for pcap file "+sys.argv[1]+"\n")
        for callid in messages.keys():
            print_debug ("callid: "+callid)
            print_debug ("params: ")
            print_debug (messages[callid])
            print_debug ("===")
            spi=[]
            for params in messages[callid]:
                print_debug (params)
                # obtain CK,IK
                try:
#                   CK,IK = params['CK'],params['IK']
                    CK,IK= "\"0x"+re.match('\"(.*)\"',params['CK']).group(1)+"\"", \
                    "\"0x"+re.match('\"(.*)\"',params['IK']).group(1)+"\""
                except:
                        pass
                else:
                        print_debug ("CK="+CK)
                        print_debug ("IK="+IK)

                # get SPI
                try:
                    spi.append(params['spi-c'])
                    spi.append(params['spi-s'])
                except:
                        pass
                else:
                        print_debug( spi)
            if spi!=[]:
                    f.write( "# sip.Call-ID == \""+callid+"\"\n")
                    spi=map(spi_normalize,spi)
                    print "stored SPI for callid: "+callid
            for i in spi:
                f.write("\"IPv4\",\"*\",\"*\","+ i+","+ealg+","+CK+","+alg+","+IK+"\n")
#       f.write("# EOF")
    return

if len(sys.argv)<2:
        print "VoLTE IPSEC decoder. Prepares esp_sa file for wireshark from pcap"
        print "Copyright (c) Denis Gudtsov, 2016"
        print "need pcap file name"
        print "usage: %s filename.pcap" % sys.argv[0]
        print "input pcap file must contain Gm AND Mw frames"
        exit()

pcap=sys.argv[1]
ts=ts.replace('__FILE_NAME__',pcap)

packet_started=False

cmd = subprocess.Popen(ts, shell=True, stdout=subprocess.PIPE)

for line in cmd.stdout:
#for line in f:

# start of frame
    if ("Request-Line:" in line) or ("Status-Line:" in line):
        print_debug( "packet started")
        print_debug( line)
        packet_started = False
        pkt_params={}
# start of interested packet
    if ("Request-Line: REGISTER" in line) or ("Status-Line: SIP/2.0 401" in line):
        print_debug( " -interested packet")
        print_debug( " -"+line)
        packet_started=True

    if packet_started:
        line=line.rstrip()

        if "Call-ID:" in line:
            callid=extract_header_value(line)
            print_debug ("callid="+callid)
            try:
                messages[callid]
            except:
                # create new array for messages if empty
                messages[callid]=[]
            pkt_params['callid']=callid

# get current header name line
        header=extract_header_key(line)
#       print_debug( header)
        try:
            # search current headers among interesting headers list
            link = headers[header]
            if link != "":
                print_debug( "found: "+ link)
                # store value of header
                pkt_params[link]=extract_header_value(line)
        except:
            # if header is not interesting - skipping it
                pass

# end of packet - empty line
    if line == "":
        packet_started=False
        # store collected values if any
        if pkt_params!={}:
            print_debug( "all params for callid = "+callid+" :")
            print_debug( pkt_params)
            #get already stored values for the callid
            list=[]
            list=messages[callid]
            # add new values into callid
            list.append(pkt_params)
            messages[callid]=list

            print_debug( "all messages for callid = "+callid+" :")
            print_debug( messages[callid])

# end of loop

print "list of callids processed:"
print messages.keys()

generate_esp_sa(messages)

